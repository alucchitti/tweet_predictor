{"version":3,"sources":["components/Header.js","components/Prediction.js","components/images/khloe.jpg","components/images/obama.jpg","components/Main.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Header","id","Prediction","winner","pct","tweet","href","target","rel","Math","trunc","Main","useState","setTweet","submittedTweet","setSubmittedTweet","data","setWinner","setPct","gaugePct","setGaugePct","isPending","setIsPending","handleSubmit","e","a","preventDefault","axios","get","encodeURIComponent","result","one","zero","console","error","onSubmit","alt","style","float","marginLeft","marginTop","borderRadius","src","khloe","width","marginRight","obama","required","maxLength","value","onChange","length","disabled","className","colSpan","nrOfLevels","colors","percent","arcPadding","animate","formatTextValue","textColor","needleColor","needleBaseColor","Footer","height","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2445532f.chunk.js","sourcesContent":["import React  from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div id='header'>\r\n            <h1>Who's Tweeting?</h1>\r\n            <h2>Khloe Kardashian vs. Barack Obama</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React  from 'react';\r\n\r\nconst Prediction = ({ winner, pct, tweet}) => {\r\n    return (\r\n        <div id='prediction'>\r\n            <p>Looks like <a href={`https://twitter.com/${winner}`} target=\"_blank\" rel=\"noopener noreferrer\">@{winner}</a> is {Math.trunc(pct*100)}% times more likely to tweet \"<span id='enteredTweet'>{tweet}</span>\"</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Prediction","export default __webpack_public_path__ + \"static/media/khloe.6b0dd094.jpg\";","export default __webpack_public_path__ + \"static/media/obama.8c7d0b90.jpg\";","import React, { useState } from 'react';\r\nimport GaugeChart from 'react-gauge-chart'\r\nimport Prediction from './Prediction.js'\r\nimport khloe from './images/khloe.jpg'\r\nimport obama from './images/obama.jpg'\r\nimport axios from 'axios';\r\n\r\nconst Main = () => {\r\n\r\n    const [tweet, setTweet] = useState('');\r\n    const [submittedTweet, setSubmittedTweet] = useState('');\r\n    const [data] = useState({\"one\": 0, \"zero\": 0});\r\n    const [winner, setWinner] = useState('');\r\n    const [pct, setPct] = useState(0.5);\r\n    const [gaugePct, setGaugePct] = useState(0.5)\r\n    const [isPending, setIsPending] = useState(false);\r\n\r\n\r\n    const handleSubmit = async(e) => {\r\n        e.preventDefault();\r\n\r\n        setIsPending(true);\r\n\r\n        try {\r\n            const result = await axios.get(`https://mighty-ridge-34468.herokuapp.com/https://arcane-garden-30153.herokuapp.com/resp?text=${encodeURIComponent(tweet)}`)\r\n            data.one = result.data.one;\r\n            data.zero = result.data.zero;\r\n  \r\n          } catch (error) {\r\n            console.error(error);\r\n          }\r\n\r\n        // 1 - Obama    0 - Khloe\r\n        if (data.one > data.zero) {\r\n            setWinner('BarackObama')\r\n            setGaugePct(data.one)\r\n        } else {\r\n            setWinner('khloekardashian')\r\n            setGaugePct(data.zero)\r\n        }\r\n        setPct(data.one)\r\n        setSubmittedTweet(tweet)\r\n        setTweet('');\r\n        setIsPending(false);\r\n\r\n    }\r\n\r\n    const gaugeStyle = {\r\n        width: '50%',\r\n    }\r\n    \r\n    return (\r\n        <div id=\"main\">\r\n            <form onSubmit={handleSubmit}>\r\n                <h3>Enter Tweet</h3>\r\n                <a href='https://twitter.com/khloekardashian' target=\"_blank\" rel=\"noopener noreferrer\"><img id='khloepic' alt='Khloe Kardashian' style={{float: 'left', marginLeft: '75px', marginTop: '15px', borderRadius: '4px'}} src={khloe} width=\"120\"/></a>\r\n                <a href='https://twitter.com/barackobama' target=\"_blank\" rel=\"noopener noreferrer\"><img id='obamapic' alt='Barack Obama' style={{float: 'right', marginRight: '75px', marginTop: '15px', borderRadius: '4px'}} src={obama} width=\"120\"/></a>\r\n                <textarea\r\n                    required\r\n                    maxLength=\"280\"\r\n                    value={tweet}\r\n                    onChange={(e) => setTweet(e.target.value)}\r\n                ></textarea>\r\n                <p id=\"charcount\">Characters Left: {280 - tweet.length}</p>\r\n                <br/>\r\n                {!isPending && <button>Get Prediction</button>}\r\n                {isPending && <button disabled>Getting Prediction...</button>}\r\n            </form>\r\n            <table>\r\n                <tbody>\r\n                <tr>\r\n                    <th className='gauge' colSpan='2'>\r\n                        <GaugeChart id=\"gauge-chart\" \r\n                                                nrOfLevels={35}\r\n                                                colors={['#FF8921', '#097969']}\r\n                                                percent={pct}\r\n                                                arcPadding={0.02}\r\n                                                animate={true}\r\n                                                formatTextValue={value => Math.trunc(gaugePct*100)+'%'}\r\n                                                textColor={'black'}\r\n                                                needleColor={'#949494'}\r\n                                                needleBaseColor={'#949494'}\r\n                                                style={gaugeStyle}\r\n                                                />\r\n                    </th>\r\n                </tr>\r\n                <tr id='names'>\r\n                    <th className='name khloe'><p>Khloe Kardashian</p></th>\r\n                    <th className='name obama'><p>Barack Obama</p></th>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n            {pct!==.5 && <Prediction winner={winner} pct={gaugePct} tweet={submittedTweet}/>}\r\n        </div>\r\n      )\r\n}\r\n\r\nexport default Main","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <p>Anthony Lucchitti</p>\r\n            <a href=\"https://www.linkedin.com/in/alucchitti/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <img src=\"https://cdn.icon-icons.com/icons2/2428/PNG/512/linkedin_black_logo_icon_147114.png\" alt=\"Linkedin\" width=\"25\" height=\"25\"/>\r\n            </a>\r\n            <a href=\"https://github.com/alucchitti/tweet_predictor\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <img src=\"https://image.flaticon.com/icons/png/512/25/25231.png\" alt=\"GitHub\" width=\"25\" height=\"25\"/>\r\n            </a>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer","import React  from 'react';\r\nimport Header from './components/Header.js'\r\nimport Main from './components/Main.js'\r\nimport Footer from './components/Footer.js'\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <Header />\r\n      <Main />\r\n      <Footer />\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}